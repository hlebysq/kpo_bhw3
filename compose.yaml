version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_port_connectivity" ]
      interval: 5s
      timeout: 10s
      retries: 20
    networks:
      - microservices-net

  orderservice:
    container_name: orderservice
    build:
      context: .
      dockerfile: ./OrderService.Api/Dockerfile
    ports:
      - "5001:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - RabbitMq__Host=rabbitmq
      - ConnectionStrings__DefaultConnection=Data Source=/app/data/orders.db
    volumes:
      - orderservice-data:/app/data
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices-net

  paymentservice:
    container_name: paymentservice
    build:
      context: .
      dockerfile: ./PaymentService.Api/Dockerfile
    ports:
      - "5002:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - RabbitMq__Host=rabbitmq
      - ConnectionStrings__DefaultConnection=Data Source=/app/data/payments.db
    volumes:
      - paymentservice-data:/app/data
    depends_on:
      rabbitmq:
        condition: service_healthy  
    networks:
      - microservices-net

  apigateway:
    container_name: apigateway
    build:
      context: .
      dockerfile: ./ApiGateway.Ocelot/Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - orderservice
      - paymentservice
    networks:
      - microservices-net

networks:
  microservices-net:
    driver: bridge

volumes:
  orderservice-data:
  paymentservice-data: